#!
public enum FrameBufferType : byte
{
    ARGB=0,
    RGBA=1,
    ABGR=2,
    BGRA=3
}
!#

# identifier : type                 is a type definition
# identifier : type = value         is a variable definition
# identifier : type = _             is a variable definition whose value is don't care
# identifier := expr                is a variable definition whose type reflects the type of the expression
#
# identifier = expr                 is an assignment (not a decleration)

BootBoot :
{
    magic               : [32]bit
    size                : [32]bit
    protocol            : [8]bit
    fbType              : [8]bit    # Todo enum
    numCores            : [16]bit
    bootstrapAPICId     : [16]bit
    timezone            : [-16]bit
    dateTime            : [64]bit
    initRDPtr           : [64]bit
    initRDSize          : [64]bit
    fbPtr               : [64]bit
    fbSize              : [32]bit
    fbWidth , fbHeight  : [32]bit
    fbScanline          : [32]bit
    acpiPtr             : [64]bit
    smbiPtr             : [64]bit
    efiPtr              : [64]bit
    mpPtr               : [64]bit
    unused              : [256]bit  # Would be preferable here to use _ : [256]bit   since we don't need a name
}

bootboot    : *BootBoot = 0xFFFFFFFFFFE00000 as *BootBoot
environment : *[8]bit   = 0xFFFFFFFFFFE01000 as *[8]bit
frameBuffer : *[32]bit   = 0xFFFFFFFFFFC00000 as *[32]bit

Main : ()() =
{
    localBoot := *bootboot
    x,y : [32]bit = 0

    s := localBoot.fbScanline
    w := localBoot.fbWidth
    h := localBoot.fbHeight

    for y = 0..h
    {
        frameBuffer[s*y+w/2] = 0x00FFFFFF
    }
    for x = 0..w
    {
        frameBuffer[s*(h/2)+x] = 0x00FFFFFF
    }

    for y = 20..40
    {
        for x=20..40
        {
            frameBuffer[s*y+(x+ 0)] = 0x00FF0000
            frameBuffer[s*y+(x+30)] = 0x0000FF00
            frameBuffer[s*y+(x+50)] = 0x000000FF
        }
    }
    return
}